import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t,a as e,f as p}from"./app-TtZz6J-E.js";const o={},c=e("p",null,"这几行文字，是一个由超强人工智能驱动的模拟世界，使用python编写",-1),i=p(`<p>这个项目的设计思路参考斯坦福的虚拟小镇，废话不多说，上代码</p><h2 id="适用简易的chatgptapi" tabindex="-1"><a class="header-anchor" href="#适用简易的chatgptapi"><span>适用简易的ChatGPTApi</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> random

<span class="token comment"># ChatGPT API的接口</span>
<span class="token keyword">class</span> <span class="token class-name">ChatGPT</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prompt<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>prompt <span class="token operator">=</span> prompt
        <span class="token comment"># 初始化ChatGPT模型的代码</span>

    <span class="token keyword">def</span> <span class="token function">generate_text</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 使用ChatGPT API生成文本响应的代码</span>
        <span class="token comment"># 为了这个示例，我们将随机生成一些文本</span>
        responses <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;Hello, how are you?&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;I&#39;m sorry, I don&#39;t understand.&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;That&#39;s interesting, tell me more.&quot;</span>
        <span class="token punctuation">]</span>
        <span class="token keyword">return</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>responses<span class="token punctuation">)</span>

<span class="token comment"># 虚拟人物的类</span>
<span class="token keyword">class</span> <span class="token class-name">VirtualPerson</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> prompt<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>chatbot <span class="token operator">=</span> ChatGPT<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
        response <span class="token operator">=</span> self<span class="token punctuation">.</span>chatbot<span class="token punctuation">.</span>generate_text<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>response<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">remember</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>message<span class="token punctuation">)</span>

<span class="token comment"># 对话管理器的类</span>
<span class="token keyword">class</span> <span class="token class-name">DialogueManager</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> virtual_people<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>virtual_people <span class="token operator">=</span> virtual_people

    <span class="token keyword">def</span> <span class="token function">start_conversation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> virtual_person <span class="token keyword">in</span> self<span class="token punctuation">.</span>virtual_people<span class="token punctuation">:</span>
            virtual_person<span class="token punctuation">.</span>speak<span class="token punctuation">(</span>message<span class="token operator">=</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">continue_conversation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 根据之前的对话选择下一个说话的虚拟人物</span>
        next_speaker <span class="token operator">=</span> self<span class="token punctuation">.</span>select_next_speaker<span class="token punctuation">(</span><span class="token punctuation">)</span>
        next_speaker<span class="token punctuation">.</span>speak<span class="token punctuation">(</span>message<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">select_next_speaker</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 根据之前的对话选择下一个说话的虚拟人物的逻辑</span>
        <span class="token comment"># 为了这个示例，我们将随机选择一个虚拟人物</span>
        <span class="token keyword">return</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>virtual_people<span class="token punctuation">)</span>

<span class="token comment"># 环境因素的类</span>
<span class="token keyword">class</span> <span class="token class-name">Environment</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperature<span class="token punctuation">,</span> weather<span class="token punctuation">,</span> social_context<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature
        self<span class="token punctuation">.</span>weather <span class="token operator">=</span> weather
        self<span class="token punctuation">.</span>social_context <span class="token operator">=</span> social_context

    <span class="token keyword">def</span> <span class="token function">affect_conversation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> virtual_person<span class="token punctuation">)</span><span class="token punctuation">:</span>
        message <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;The weather is </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>weather<span class="token punctuation">}</span></span><span class="token string"> and the temperature is </span><span class="token interpolation"><span class="token punctuation">{</span>self<span class="token punctuation">.</span>temperature<span class="token punctuation">}</span></span><span class="token string">.&quot;</span></span>
        virtual_person<span class="token punctuation">.</span>remember<span class="token punctuation">(</span>message<span class="token punctuation">)</span>
        virtual_person<span class="token punctuation">.</span>speak<span class="token punctuation">(</span>message<span class="token punctuation">)</span>

<span class="token comment"># 主程序</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    virtual_people <span class="token operator">=</span> <span class="token punctuation">[</span>
        VirtualPerson<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> prompt<span class="token operator">=</span><span class="token string">&quot;As an AI assistant in a weather app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        VirtualPerson<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> prompt<span class="token operator">=</span><span class="token string">&quot;As a chatbot for a travel app&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>

    environment <span class="token operator">=</span> Environment<span class="token punctuation">(</span>temperature<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> weather<span class="token operator">=</span><span class="token string">&quot;sunny&quot;</span><span class="token punctuation">,</span> social_context<span class="token operator">=</span><span class="token string">&quot;casual&quot;</span><span class="token punctuation">)</span>

    dialogue_manager <span class="token operator">=</span> DialogueManager<span class="token punctuation">(</span>virtual_people<span class="token punctuation">)</span>
    dialogue_manager<span class="token punctuation">.</span>start_conversation<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 假设这是用户输入</span>
    user_message <span class="token operator">=</span> <span class="token string">&quot;I&#39;m doing well, thanks!&quot;</span>
    dialogue_manager<span class="token punctuation">.</span>continue_conversation<span class="token punctuation">(</span>user_message<span class="token punctuation">)</span>

    <span class="token comment"># 环境因素影响对话</span>
    environment<span class="token punctuation">.</span>affect_conversation<span class="token punctuation">(</span>virtual_people<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用openai调用" tabindex="-1"><a class="header-anchor" href="#使用openai调用"><span>使用openai调用</span></a></h2><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token keyword">import</span> openai

openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> <span class="token string">&quot;your_api_key&quot;</span>

<span class="token keyword">class</span> <span class="token class-name">ChatGPT</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prompt<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>prompt <span class="token operator">=</span> prompt

    <span class="token keyword">def</span> <span class="token function">generate_text</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> openai<span class="token punctuation">.</span>Completion<span class="token punctuation">.</span>create<span class="token punctuation">(</span>
            engine<span class="token operator">=</span><span class="token string">&quot;text-davinci-003&quot;</span><span class="token punctuation">,</span>
            prompt<span class="token operator">=</span>self<span class="token punctuation">.</span>prompt <span class="token operator">+</span> <span class="token string">&quot;\\nUser: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">,</span>
            max_tokens<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span>
            temperature<span class="token operator">=</span><span class="token number">0.7</span>
        <span class="token punctuation">)</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function l(u,r){return s(),a("div",null,[c,t(" more "),i])}const m=n(o,[["render",l],["__file","虚拟世界.html.vue"]]),v=JSON.parse('{"path":"/posts/%E8%BD%AF%E4%BB%B6%E4%BD%9C%E5%93%81/%E8%99%9A%E6%8B%9F%E4%B8%96%E7%95%8C.html","title":"这几行文字，是一个多彩、完美的社会","lang":"zh-CN","frontmatter":{"title":"这几行文字，是一个多彩、完美的社会","categoty":["软件作品"],"Tag":["命令行","人工智能"],"description":"这几行文字，是一个由超强人工智能驱动的模拟世界，使用python编写 这个项目的设计思路参考斯坦福的虚拟小镇，废话不多说，上代码 适用简易的ChatGPTApi 使用openai调用 ","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E8%BD%AF%E4%BB%B6%E4%BD%9C%E5%93%81/%E8%99%9A%E6%8B%9F%E4%B8%96%E7%95%8C.html"}],["meta",{"property":"og:site_name","content":"EasHub"}],["meta",{"property":"og:title","content":"这几行文字，是一个多彩、完美的社会"}],["meta",{"property":"og:description","content":"这几行文字，是一个由超强人工智能驱动的模拟世界，使用python编写 这个项目的设计思路参考斯坦福的虚拟小镇，废话不多说，上代码 适用简易的ChatGPTApi 使用openai调用 "}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-21T16:26:21.000Z"}],["meta",{"property":"article:author","content":"Eason Zhao"}],["meta",{"property":"article:modified_time","content":"2024-02-21T16:26:21.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"这几行文字，是一个多彩、完美的社会\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-21T16:26:21.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Eason Zhao\\",\\"url\\":\\"hub.vnop.cn\\"}]}"]]},"headers":[{"level":2,"title":"适用简易的ChatGPTApi","slug":"适用简易的chatgptapi","link":"#适用简易的chatgptapi","children":[]},{"level":2,"title":"使用openai调用","slug":"使用openai调用","link":"#使用openai调用","children":[]}],"git":{"createdTime":1708532781000,"updatedTime":1708532781000,"contributors":[{"name":"Eason Zhao","email":"140871813+EasVNOP@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.52,"words":456},"filePathRelative":"posts/软件作品/虚拟世界.md","localizedDate":"2024年2月21日","excerpt":"<p>这几行文字，是一个由超强人工智能驱动的模拟世界，使用python编写</p>\\n","autoDesc":true}');export{m as comp,v as data};
